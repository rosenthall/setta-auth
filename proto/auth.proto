syntax = "proto3";

package auth;

option go_package = "setta-auth/internal/api/";

// Service for handling JWT operations.
service AuthService {
  // Generates a token based on provided data.
  rpc GenerateToken(GenerateTokenRequest) returns (TokenResponse);

  // Validates and verifies a token.
  rpc ValidateToken(ValidateTokenRequest) returns (TokenValidationResponse);

  // Refreshes a JWT token.
  rpc RefreshToken(RefreshTokenRequest) returns (TokenResponse);

  // Extracts data from a token.
  rpc ExtractTokenData(ExtractTokenDataRequest) returns (TokenDataResponse);
}

// Request for generating a token.
message GenerateTokenRequest {
  // User identifier for whom the token is being generated.
  string user_id = 1;
  // Input data for token generation (e.g., user credentials).
  UserData user_data = 2;
}

// Token response.
message TokenResponse {
  // The generated JWT access token.
  string access_token = 1;
  // The new refresh token.
  string refresh_token = 2;
}

// Request for token validation.
message ValidateTokenRequest {
  // JWT token to be validated.
  string token = 1;
}

// Response for token validation.
message TokenValidationResponse {
  // The result of validation (valid or not).
  bool is_valid = 1;
}

// Request for token refresh.
message RefreshTokenRequest {
  // User Identifier.
  string user_id = 1;
  // Existing JWT access token to be refreshed.
  string access_token = 2;
  // Refresh token used to obtain a new access token.
  string refresh_token = 3;
}

// Request for extracting data from a token.
message ExtractTokenDataRequest {
  // JWT token from which to extract data.
  string token = 1;
}

// Response with token data.
message TokenDataResponse {
  // Extracted data from the token.
  map<string, string> data = 1;
}

// Definition of user data.
message UserData {
  // User identifier.
  string user_id = 1;
  // Additional user data.
  map<string, string> additional_data = 2;
}
